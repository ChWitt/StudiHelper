//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudiHelper.DataSource
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataEntities : DbContext
    {
        public DataEntities()
            : base("name=DataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Curs> Curs1 { get; set; }
        public virtual DbSet<Lesson> Lessons { get; set; }
        public virtual DbSet<Modul> Moduls { get; set; }
        public virtual DbSet<Tutor> Tutors { get; set; }
    
        [DbFunction("DataEntities", "GetAllOfCurs")]
        public virtual IQueryable<GetAllOfCurs_Result> GetAllOfCurs(Nullable<int> cursID)
        {
            var cursIDParameter = cursID.HasValue ?
                new ObjectParameter("cursID", cursID) :
                new ObjectParameter("cursID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllOfCurs_Result>("[DataEntities].[GetAllOfCurs](@cursID)", cursIDParameter);
        }
    
        [DbFunction("DataEntities", "GetAllOfDay")]
        public virtual IQueryable<GetAllOfDay_Result> GetAllOfDay(Nullable<System.DateTime> day)
        {
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllOfDay_Result>("[DataEntities].[GetAllOfDay](@Day)", dayParameter);
        }
    
        [DbFunction("DataEntities", "GetAllOfWeek")]
        public virtual IQueryable<GetAllOfWeek_Result> GetAllOfWeek(Nullable<System.DateTime> firstDay, Nullable<System.DateTime> lastDay)
        {
            var firstDayParameter = firstDay.HasValue ?
                new ObjectParameter("FirstDay", firstDay) :
                new ObjectParameter("FirstDay", typeof(System.DateTime));
    
            var lastDayParameter = lastDay.HasValue ?
                new ObjectParameter("LastDay", lastDay) :
                new ObjectParameter("LastDay", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllOfWeek_Result>("[DataEntities].[GetAllOfWeek](@FirstDay, @LastDay)", firstDayParameter, lastDayParameter);
        }
    }
}
